import unittest
from NumeroFibonacci import NumeroFibonacci
class NumeroFibonacciTest(unittest.TestCase):
    
    def test_creacionObjetonumeroFibonacci(self):
        self.numeroF = NumeroFibonacci()
        self.assertEqual(0, self.numeroF.getValor())

    def test_avanza_uno(self):
        self.numeroF = NumeroFibonacci()
        self.numeroF.avanzar()
        self.assertEqual(1, self.numeroF.getValor())

    def test_avanza_dos_retrocede_tres(self):
        self.numeroF = NumeroFibonacci()
        try:
            self.numeroF.avanzar()
            self.numeroF.avanzar()
            self.numeroF.retroceder()
            self.numeroF.retroceder()
            self.numeroF.retroceder()
            self.assertRaises(ValueError,self.numeroF.retroceder())
        except Exception as e:
            print(e)

    def test_avanza_dos(self):
        self.numeroF = NumeroFibonacci()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.assertEqual(1, self.numeroF.getValor())

    def test_avanza_tres(self):
        self.numeroF = NumeroFibonacci()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.assertEqual(2, self.numeroF.getValor())

    def test_retornar(self):
        self.numeroF = NumeroFibonacci()
        self.numeroF.avanzar()
        self.numeroF.retroceder()
        self.assertEqual(0, self.numeroF.getValor())

    def test_avanza_cuatro_retorna_tres_veces(self):
        self.numeroF = NumeroFibonacci()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.retroceder()
        self.numeroF.retroceder()
        self.numeroF.retroceder()
        self.assertEqual(1, self.numeroF.getValor())
    
    def test_avanza_cuatro_retorna_cuatro_veces(self):
        self.numeroF = NumeroFibonacci()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.retroceder()
        self.numeroF.retroceder()
        self.numeroF.retroceder()
        self.numeroF.retroceder()
        self.assertEqual(0, self.numeroF.getValor())

    def test_avanzar_cinco_retroceder_dos(self):
        self.numeroF = NumeroFibonacci()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.retroceder()
        self.numeroF.retroceder()
        self.assertEqual(2, self.numeroF.getValor())

    def test_avanzar_cinco_retroceder_dos_reiniciar(self):
        self.numeroF = NumeroFibonacci()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.retroceder()
        self.numeroF.retroceder()
        self.numeroF.reiniciar()
        self.assertEqual(0,self.numeroF.getValor())

    def test_avanzar_uno_reiniciar(self):
        self.numeroF = NumeroFibonacci()
        self.numeroF.avanzar()
        self.numeroF.reiniciar()
        self.assertEqual(0,self.numeroF.getValor())

    def test_avanzar_dos_reiniciar(self):
        self.numeroF = NumeroFibonacci()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.reiniciar()
        self.assertEqual(0,self.numeroF.getValor())
        
    def test_avanzar_cinco_reiniciar(self):
        self.numeroF = NumeroFibonacci()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.reiniciar()
        self.assertEqual(0,self.numeroF.getValor())
    
    def test_avanzar_cinco_retrocede_uno_reinicia(self):
        self.numeroF = NumeroFibonacci()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.retroceder()
        self.numeroF.reiniciar()
        self.assertEqual(0,self.numeroF.getValor())

    def test_avanzar_cinco_retrocede_uno_reinicia_avanza_uno(self):
        self.numeroF = NumeroFibonacci()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.retroceder()
        self.numeroF.reiniciar()
        self.numeroF.avanzar()
        self.assertEqual(1,self.numeroF.getValor())

    def test_avanzar_uno_retrocede_uno_reinicia_avanza_uno(self):
        self.numeroF = NumeroFibonacci()
        self.numeroF.avanzar()
        self.numeroF.retroceder()
        self.numeroF.reiniciar()
        self.numeroF.avanzar()
        self.assertEqual(1,self.numeroF.getValor())
    
    def test_avanzar_retroceder_avanzar_retroceder(self):
        self.numeroF = NumeroFibonacci()
        self.numeroF.avanzar()
        self.numeroF.retroceder()
        self.numeroF.avanzar()
        self.numeroF.retroceder()
        self.numeroF.avanzar()
        self.numeroF.retroceder()
        self.assertEqual(0,self.numeroF.getValor())

    def test_retrocede_inicio(self):
        self.numeroF = NumeroFibonacci()
        try:
            self.assertRaises(ValueError,self.numeroF.retroceder())
        except Exception as e:
            print(e)

    def test_avanzar_cinco_retroceder_tres(self):
        self.numeroF = NumeroFibonacci()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.retroceder()
        self.numeroF.retroceder()
        self.numeroF.retroceder()
        self.assertEqual(1,self.numeroF.getValor())
    
    def test_avanzar_cinco_retroceder_cuatro(self):
        self.numeroF = NumeroFibonacci()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.retroceder()
        self.numeroF.retroceder()
        self.numeroF.retroceder()
        self.numeroF.retroceder()
        self.assertEqual(1,self.numeroF.getValor())

    def test_avanzar_cinco_retroceder_cuatro_avanzar_cinco(self):
        self.numeroF = NumeroFibonacci()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.retroceder()
        self.numeroF.retroceder()
        self.numeroF.retroceder()
        self.numeroF.retroceder()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.assertEqual(8,self.numeroF.getValor())

    def test_reiniciar_dos_veces(self):
        self.numeroF = NumeroFibonacci()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.retroceder()
        self.numeroF.retroceder()
        self.numeroF.retroceder()
        self.numeroF.retroceder()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.reiniciar()
        self.numeroF.reiniciar()
        self.assertEqual(0,self.numeroF.getValor())
    
    def test_reiniciar_dos_veces_avanzar_dos_veces(self):
        self.numeroF = NumeroFibonacci()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.reiniciar()
        self.numeroF.reiniciar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.assertEqual(1,self.numeroF.getValor())

    def test_avanzar_treinta_retroceder_una(self):
        self.numeroF = NumeroFibonacci()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.retroceder()
        self.assertEqual(514229,self.numeroF.getValor())

        
    def test_avanzar_treinta_retroceder_veinte(self):
        self.numeroF = NumeroFibonacci()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.retroceder()
        self.numeroF.retroceder()
        self.numeroF.retroceder()
        self.numeroF.retroceder()
        self.numeroF.retroceder()
        self.numeroF.retroceder()
        self.numeroF.retroceder()
        self.numeroF.retroceder()
        self.numeroF.retroceder()
        self.numeroF.retroceder()
        self.numeroF.retroceder()
        self.numeroF.retroceder()
        self.numeroF.retroceder()
        self.numeroF.retroceder()
        self.numeroF.retroceder()
        self.numeroF.retroceder()
        self.numeroF.retroceder()
        self.numeroF.retroceder()
        self.numeroF.retroceder()
        self.numeroF.retroceder()
        self.assertEqual(55,self.numeroF.getValor())

    def generarNumeroBinarioVSgenerarNumeroExadecimal(self):
        self.numeroF = NumeroFibonacci()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.GenerarNumeroBinario()
        self.numeroF.GenerarNumeroExadecimal()
        self.assertIsNot(self.numeroF.getNumeroHexadecimal, self.numeroF.getNumeroBinario())

    def generarNumeroBinarioVSgenerarNumeroExadecimal2(self):
        self.numeroF = NumeroFibonacci()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.GenerarNumeroBinario()
        self.numeroF.GenerarNumeroExadecimal()
        self.assertIsNot(self.numeroF.getNumeroHexadecimal, self.numeroF.getNumeroBinario())

    def generarNumeroBinario(self):
        self.numeroF = NumeroFibonacci()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.GenerarNumeroBinario()
        self.assertEqual('10',self.numeroF.getNumeroBinario())
    
    def generarNumeroBinario2(self):
        self.numeroF = NumeroFibonacci()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.GenerarNumeroBinario()
        self.assertEqual('010',self.numeroF.getNumeroBinario())

    def generarNumeroBinario3(self):
        self.numeroF = NumeroFibonacci()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.GenerarNumeroBinario()
        self.assertEqual('101',self.numeroF.getNumeroBinario())
    
    def generarNumeroBinario4(self):
        self.numeroF = NumeroFibonacci()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.GenerarNumeroBinario()
        self.assertEquals('10101',self.numeroF.getNumeroBinario())

    def generarNumeroBinario5(self):
        self.numeroF = NumeroFibonacci()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.retroceder()
        self.numeroF.GenerarNumeroBinario()
        self.assertEquals('1101',self.numeroF.getNumeroBinario())
        
    def generarNumeroBinario6(self):
        self.numeroF = NumeroFibonacci()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.retroceder()
        self.numeroF.retroceder()
        self.numeroF.GenerarNumeroBinario()
        self.assertEquals('101',self.numeroF.getNumeroBinario())

    def generarNumeroBinario7(self):
        self.numeroF = NumeroFibonacci()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.retroceder()
        self.numeroF.retroceder()
        self.numeroF.retroceder()
        self.numeroF.GenerarNumeroBinario()
        self.assertEquals('11',self.numeroF.getNumeroBinario())

    def generarNumeroBinario8(self):
        self.numeroF = NumeroFibonacci()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.retroceder()
        self.numeroF.retroceder()
        self.numeroF.retroceder()
        self.numeroF.reiniciar()
        self.numeroF.GenerarNumeroBinario()
        self.assertEquals('0',self.numeroF.getNumeroBinario())
    
    def generarNumeroBinario9(self):
        self.numeroF = NumeroFibonacci()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.retroceder()
        self.numeroF.retroceder()
        self.numeroF.retroceder()
        self.numeroF.reiniciar()
        self.numeroF.avanzar()
        self.numeroF.GenerarNumeroBinario()
        self.assertEquals('1',self.numeroF.getNumeroBinario())

    def generarNumeroBinario10(self):
        self.numeroF = NumeroFibonacci()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.retroceder()
        self.numeroF.retroceder()
        self.numeroF.retroceder()
        self.numeroF.reiniciar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.GenerarNumeroBinario()
        self.assertEquals('1',self.numeroF.getNumeroBinario())

    def GenerarNumeroExadecimal(self):
        self.numeroF = NumeroFibonacci()
        self.numeroF.avanzar()
        self.numeroF.GenerarNumeroExadecimal()
        self.assertEqual('1',self.numeroF.getNumeroBinario())

    def GenerarNumeroExadecimal2(self):
        self.numeroF = NumeroFibonacci()
        self.numeroF.GenerarNumeroExadecimal()
        self.assertEqual('0',self.numeroF.getNumeroBinario())

    def GenerarNumeroExadecimal3(self):
        self.numeroF = NumeroFibonacci()
        self.numeroF.avanzar()
        self.numeroF.GenerarNumeroExadecimal()
        self.assertEqual('1',self.numeroF.getNumeroBinario())
        
    def GenerarNumeroExadecimal4(self):
        self.numeroF = NumeroFibonacci()
        self.numeroF.avanzar()
        self.numeroF.retroceder()
        self.numeroF.GenerarNumeroExadecimal()
        self.assertEqual('0',self.numeroF.getNumeroBinario())

    def GenerarNumeroExadecimal5(self):
        self.numeroF = NumeroFibonacci()
        self.numeroF.avanzar()
        self.numeroF.retroceder()
        self.numeroF.GenerarNumeroExadecimal()
        self.assertEqual('0',self.numeroF.getNumeroHexadecimal())

    def GenerarNumeroExadecimal6(self):
        self.numeroF = NumeroFibonacci()
        self.numeroF.avanzar()
        self.numeroF.retroceder()
        self.numeroF.avanzar()
        self.numeroF.GenerarNumeroExadecimal()
        self.assertEqual('1',self.numeroF.getNumeroBinario())

    def GenerarNumeroExadecimal7(self):
        self.numeroF = NumeroFibonacci()
        self.numeroF.avanzar()
        self.numeroF.retroceder()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.GenerarNumeroExadecimal()
        self.assertEqual('1',self.numeroF.getNumeroBinario())

    def GenerarNumeroExadecimal8(self):
        self.numeroF = NumeroFibonacci()
        self.numeroF.avanzar()
        self.numeroF.retroceder()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.GenerarNumeroExadecimal()
        self.assertEqual('1',self.numeroF.getNumeroBinario())

    def GenerarNumeroExadecimal9(self):
        self.numeroF = NumeroFibonacci()
        self.numeroF.avanzar()
        self.numeroF.retroceder()
        self.numeroF.avanzar()
        self.numeroF.retroceder()
        self.numeroF.avanzar()
        self.numeroF.GenerarNumeroExadecimal()
        self.assertEqual('1',self.numeroF.getNumeroBinario())

    def GenerarNumeroExadecimal10(self):
        self.numeroF = NumeroFibonacci()
        self.numeroF.avanzar()
        self.numeroF.retroceder()
        self.numeroF.avanzar()
        self.numeroF.retroceder()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.avanzar()
        self.numeroF.GenerarNumeroExadecimal()
        self.assertEqual('2',self.numeroF.getNumeroBinario())



if __name__ == '__main__':
    unittest.main()
